name: PR tests

on:
  pull_request:
    branches: [main]
  issue_comment:
    types: [created]

jobs:
  dump:
    runs-on: ubuntu-latest
    steps:
    - name: $github
      run: echo "$GITHUB_CONTEXT"
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
  
  testjobrunoncomments:
    name: Test @toptal-bot run comments
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      github.event_name == 'issue_comment' &&
      contains(github.event.comment.html_url, '/pull/') &&
      contains(github.event.comment.body, '@toptal-bot run') &&
      (
        contains(github.event.comment.body, 'test') ||
        contains(github.event.comment.body, 'all')
      )

    steps:
      - name: Github API Request
        id: request
        uses: octokit/request-action@v2.0.0
        with:
          route: ${{ github.event.issue.pull_request.url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR informations
        id: pr_data
        run: |
          echo "::set-env name=sha::${{ fromJson(steps.request.outputs.data).head.sha }}"

      - name: Get the run id
        id: run-id
        run: |
          CHECK_SUITE_URL=$(curl -s -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} | jq -r '.check_suite_url')
          CHECK_RUN_ID=$(curl -s -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.antiope-preview+json" $CHECK_SUITE_URL/check-runs | jq '.check_runs[] | select(.name=="Test @toptal-bot run comments") | .id ')
          echo ::set-env name=runId::$CHECK_RUN_ID

      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: '${{ env.sha }}',
              name: 'Test job',
              check_run_id: '${{ env.runId }}'
            }
            try {
              const result = await github.checks.update(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

  testjob:
    name: Test job
    runs-on: ubuntu-latest

    steps:
      - run: echo "test"
